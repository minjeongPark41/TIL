Node.js의 특징, 강점, 약점

고전적인 처리 방식

- 한 줄 한 줄 처리 

단점 : 너무 많은 클릭 수를 낭비함

 

js식 비동기 처리 방식

- 일단 다 요청. (데이터가 돌아오면) 그때 다 대응

- 저수준의 오래 걸리는 일은 node에게, 고수준의 로직은 메인 스레드에서 

  "offloading"

  node가 빠른 속도와 매우 높은 확장성을 갖는 근본적인 이유

  node가 네트워크와 통신하고, 파일 읽어오고... 하는 동안 프로그래머는 더 본질적인 일에 집중

- 비동기는 무조건 싱글 스레드 (동시성 문제 신경 쓰지 않아도 됨)

 

한계 : 저수준 처리는 node가 빠르게 처리하기 어려움

-> node는 C와 WebAssembly 모듈을 바인딩해 사용하는 방법을 제공

     (C는 node-gyp를 통해, WebAssembly 는 node 12 버전부터 제공)

 

장점 : 방대한 오픈 소스 생태계

- npm (노트 패키지 매니저)

ㅡㅡㅡㅡㅡ

npm, 린터, 포매터
- 개발 환경에 필요한 패키지들이 존재. 

   다른 패키지 매니저들도 있지만 npm만 사용해도 개발에 문제가 없을 정도.

 

*npm 사용 방법*

- 내가 작업하고 있는 이 프로젝트가 npm이 관리하는 패키지라는 것을 알려줘야 함. 

  -> package.json이 필요함

- package.json를 쉽게 만들 수 있는 방법은

-> npm init -y (여기서 y는 yes의 줄임말이라고 생각)
