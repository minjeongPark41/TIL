함수
- 유사한 동작을 하는 코드가 여러 곳에서 필요할 때

- 함수는 프로그램을 구성하는 주요 '구성 요소(building block)'

  함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출 가능

 

 

함수 선언
함수 선언 방식 = 함수 선언문

 

function showMessage() {
  alert ('안녕');
}
 

- function 키워드, 함수 이름, 괄호로 둘러싼 매개변수, 함수 본문을 중괄호로 

 

function name (parameters) {
  .... 함수 본문 ... 
}
 

함수를 호출할 때는, 함수 이름 옆에  괄호를 붙여 호출

ex) showMessage() 

 

지역 변수
- 함수 내에서 선언한 변수인 '지역 변수'(local variable)는 함수 안에서만 접근 가능

 

function showMessage(){
  let message = '안녕'; // 함수 안에서 선언한 '지역 변수'
  alert(message);
}

showMessage(); // 안녕;
alert(message); // ReferenceError: message is not defined
 

외부 변수
- 함수 내부에서, 함수 외부의 변수인 외부 변수 (outer variable) = 전역 변수 (global variable)에 접근 가능

- 변수는 연관되는 '함수 내에서' 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋다. 

 

let userName = 'min';

function showMessage(){
  let message = 'Hello ! ' + userName;
  console.log(message);
}

showMessage(); // Hello ! min
 

함수에서는 외부 변수에 접근하는 것뿐만 아니라 수정도 가능

 

let userName = 'min'

function showMessage(){
  userName = 'maria'; // 외부 변수를 수정함
  let message = 'Hello ! ' + userName;
  console.log(message);
}

console.log(userName); // 함수 호출 전이므로 min 출력

showMessage(); // Hello ! maria ⭐️ 함수는 내부 변수 사용한다.

console.log(userName); // 함수에 의해 maria로 바뀜
alert(userName) // ⭐️
 

함수 내부에 외부 변수와 동일한 이름을 가진 변수가 선언되었다면 (위 경우에 userName)

-> 내부 변수가 이긴다. 🏆

 

❗️ 맨 마지막줄. alert(userName)은 뭐가 출력될까?

-> 여기서는 maria (위에 함수가 호출되었기 때문) 

-> 만약 함수가 호출안되었다면(showMessage()가 없다면) min 

 



위 사진과의 차이점이 있다면, 4번째줄에 let으로 지역변수를 또 준 것