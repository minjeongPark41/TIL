함수
- 유사한 동작을 하는 코드가 여러 곳에서 필요할 때

- 함수는 프로그램을 구성하는 주요 '구성 요소(building block)'

  함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출 가능

 

 

함수 선언
함수 선언 방식 = 함수 선언문

 

function showMessage() {
  alert ('안녕');
}
 

- function 키워드, 함수 이름, 괄호로 둘러싼 매개변수, 함수 본문을 중괄호로 

 

function name (parameters) {
  .... 함수 본문 ... 
}
 

함수를 호출할 때는, 함수 이름 옆에  괄호를 붙여 호출

ex) showMessage() 

 

지역 변수
- 함수 내에서 선언한 변수인 '지역 변수'(local variable)는 함수 안에서만 접근 가능

 

function showMessage(){
  let message = '안녕'; // 함수 안에서 선언한 '지역 변수'
  alert(message);
}

showMessage(); // 안녕;
alert(message); // ReferenceError: message is not defined
 

외부 변수
- 함수 내부에서, 함수 외부의 변수인 외부 변수 (outer variable) = 전역 변수 (global variable)에 접근 가능

- 변수는 연관되는 '함수 내에서' 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋다. 

 

let userName = 'min';

function showMessage(){
  let message = 'Hello ! ' + userName;
  console.log(message);
}

showMessage(); // Hello ! min
 

함수에서는 외부 변수에 접근하는 것뿐만 아니라 수정도 가능

 

let userName = 'min'

function showMessage(){
  userName = 'maria'; // 외부 변수를 수정함
  let message = 'Hello ! ' + userName;
  console.log(message);
}

console.log(userName); // 함수 호출 전이므로 min 출력

showMessage(); // Hello ! maria ⭐️ 함수는 내부 변수 사용한다.

console.log(userName); // 함수에 의해 maria로 바뀜
alert(userName) // ⭐️
 

함수 내부에 외부 변수와 동일한 이름을 가진 변수가 선언되었다면 (위 경우에 userName)

-> 내부 변수가 이긴다. 🏆

 

❗️ 맨 마지막줄. alert(userName)은 뭐가 출력될까?

-> 여기서는 maria (위에 함수가 호출되었기 때문) 

-> 만약 함수가 호출안되었다면(showMessage()가 없다면) min 

 



위 사진과의 차이점이 있다면, 4번째줄에 let으로 지역변수를 또 준 것

ㅡㅡㅡㅡㅡ

매개 변수 (parameter)
- 임의의 데이터를 함수 안에 전달

 

function showMessage(from, text) {
  console.log(from + ':' + text);
}

showMessage('min', 'Hello!') // min:Hello!
 

- 함수의 전달된 인자는 '지역변수' from, text에 복사됨

 

function showMessage(from, text){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

let from = 'Ahn';

showMessage(from, 'Hello!'); // *Ahn*:Hello!

console.log(from); // Ahn 함수 밖의 값은 변경되지 않음. 함수는 '복사된' 값을 사용함
 

 

기본값 
- 매개변수에 값을 전달하지 않으면 그 값은 undefined가 됨

 

function showMessage(from, text){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

showMessage('Ahn'); // *Ahn*:undefined
- 매개 변수 2개인 함수에 한 개만 전달해주어도 오류가 나지 않음. undefined로 뜰 뿐

 

-> 매개변수에 값을 전달하지 않아도 그 값이 undefined가 되지 않게 하려면 기본값(default value)을 설정

매개변수에 = 을 붙이고 설정하고자 하는 기본값을 써주면 됨

 

function showMessage(from, text="text"){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

showMessage('Ahn'); // *Ahn*:text
 

✅ 복잡한 표현식도 기본값으로 설정이 가능하다. 

 

function anotherFunction(){
  console.log("flower");
}

function showMessage(from, text=anotherFunction()){
  console.log(from + text ); // You are like a undefined
}

showMessage('You are like a ')
 

🐳

showMessage()로 하면 -> flower가 나옴

원래 위에 예상식은 You are like a undefined가 아니라 You are like a flower인데... 

 

매개변수 기본값을 설정할 수 있는 또 다른 방법

-> 함수가 실행되는 도중에 기본값을 설정

- 일단 매개변수를 undefined와 비교하여 함수 호출 시 매개변수가 생략되었는지를 확인한다. 

 

function showMessage(text){
  if(text==undefined){
    text='빈 문자열';
  }
  console.log(text); // 빈 문자열
}

showMessage();
function showMessage (text){
  text = text || '빈 문자열';
  console.log(text); // 빈 문자열
}

showMessage();

function showMessage1 (text='플라워'){
  text = text || '빈 문자열';
  console.log(text); // 플라워
}

showMessage1();
 

if문 대신 논리 연산자 || 사용 가능

 


2021년 12월에 새롭게 추가된 문법 

 

a ?? b의 평가 결과는 다음과 같음
a가 null도 아니고 undefined도 아니면 a그 외의 경우는 b

ㅡㅡㅡㅡㅡ
반환 값

반환 값 (return value)
- 함수를 호출했을 때 호출한 곳에 특정 값을 반환하게 할 수 있음

 

function sum(a,b){
  return a+b;
}

let result = sum(1,2);
console.log(result); // 3
 

return은 함수 내 어디서든 사용 가능. 

대신 return을 만나면 함수 실행은 즉시 중단되고 값을 반환함.

 

함수 하나에 여러 개의 return문이 올 수도 있음.

function checkAge(age){
  if(age>=20){
    return true;
  }else{
    return console.log("뭐든지 할 나이다.")
  }
}

let age = 24;

if(checkAge(age)){
  console.log("true"); // true
}else{
  console.log("10대");
}
 

return만 명시하는 것도 가능 = 즉시 종료

 

function checkAge(age){
  if(age>=20){
    return true;
  }else{
    return console.log("뭐든지 할 나이다.")
  }
}

function showMovie(age){
  if(!checkAge(age)){
    return
  }
}

showMovie(18); // 아무것도 출력 안 됨
 

return문이 없거나, return 지시자만 있는 함수는 undefined를 반환한다. 

- return은 return undefined와 동일하게 동작한다. 

 

function doNothing(){}

doNothing(); // 이러면 아무것도 출력이 안되서 알 수 없지만,
console.log(doNothing() === undefined); // true. 가 출력되서 return문이 없는 함수도 undefined를 반환하는 것을 알 수 있다.
function doNothing(){
  return; // 이러면 아무것도 출력이 안되서 알 수 없지만,
}

console.log(doNothing() === undefined); // true. 가 출력되서 return문'만' 있는 함수도 undefined를 반환하는 것을
 
 ㅡㅡㅡㅡㅡ

함수 이름 짓기
- 함수는 어떤 동작을 수행하기 위한 코드를 모아놓은 것. 따라서 함수의 이름은 대개 동사

- 함수 이름은 함수가 어떤 동작을 하는지 설명할 수 있어야 함.

  코드를 읽는 사람은 함수 이름만 보고도 함수가 어떤 기능을 하는지 힌트를 얻을 수 있어야 함.

 

ex)

getAge()   // 나이를 나타내는 값을 얻고 그 값을 반환함
calcSum()  // 합계를 계산하고 그 결과를 반환함
checkPermission(). // 승인 여부를 확인하고 true나 false를 반환함
 

- 함수는 동작 하나만 담당해야함

- 독립적인 두 개의 동작은 독립된 함수 두 개에서 나눠서 수행.

  한 장소에서 두 동작을 동시에 필요로 하는 경우라도(이 경우는 제3의 함수를 만들어 그곳에서 두 함수를 호출).

 

ex)

getAge 함수는 나이를 얻어오는 동작만 수행해야 함.
alert 창에 나이를 출력해주는 동작은 이 함수에 들어가지 않는 것이 좋음.

createForm 함수는 form을 만들고 이를 반환하는 동작만 해야함.
form을 문서에 추가하는 동작이 해당 함수에 들어가 있으면 좋지 않음.

checkPermission 함수는 승인 여부를 확인하고 그 결과를 반환하는 동작만 해야 함.
승인 여부를 보여주는 메시지를 띄우는 동작이 들어가 있으면 좋지 않음
 

함수 == 주석
- 함수를 간결하게 만들면 테스트와 디버깅이 쉬워진다. 그리고 함수 그 자체로 주석의 역할까지 할 수 있다. 

 

cf) n까지의 소수(prime numbers)를 출력해주는 함수 비교

function showPrimes(n){
  nextPrime:for(let i =2; i<n; i++){ 
    for (let j=2; j<i; j++){
      if(i%j==0) continue nextPrime;
    }
    console.log(i)
  }
}

showPrimes(10); // 2, 3, 5, 7
 
ㅡㅡㅡㅡㅡ
함수 표현식
- 자바스크립트는 함수를 특별한 종류의 '값'으로 취급함

  다른 언어에서처럼 "특별한 동작을 하는 구조"로 취급되지 않는다. 

- 2.15 챕터에서는 함수 선언(Function Declaration), 함수 선언문 방식으로 함수를 만들었음

 

1. 함수 선언문 방식 (Function Declaration)

function sayHi(){
  console.log("Hello");
}
 

2. 함수 표현식 (Function Expression)

let sayHi = function(){
  console.log("Hello");
}

sayHi(); // Hello
console.log(sayHi); // [Function: sayHi]
 

- 함수를 생성하고 변수에 값을 할당하는 것처럼 함수가 변수에 할당됨

- 함수가 어떤 방식으로 만들어졌는지에 관계없이 함수는 '값'이며 따라서 변수에 할당이 가능하다. 

 

- 본질이 값이기 때문에 값이 할 수 있는 일을 함수에서 할 수 있다. 

   -> 변수를 복사해서 다른 변수에 할당하는 것처럼, 함수를 복사해서 다른 변수에 할당이 가능하다. 

 

function sayHi(){ // 함수 생성. 생성한 함수가 sayHi라는 변수에 저장됨
  console.log("Hello")
}

let abc = sayHi; // 함수 복사. sayHi 변수를 새로운 변수에 저장. 괄호 없다는 점에 유의!
// sayHi()를 저장했으면 이 함수의 '호출값'이 abc 변수에 저장되었을 것

abc(); // Hello. 복사한 함수를 실행하면 정상적으로 실행이 된다.
// sayHi는 다음과 같이 '함수 표현식'으로 정의 가능
let sayHi = function (){
  console.log("Hello");
}; ✅ 함수 표현식 뒤에는 세미콜론을 붙여준다. 

let abc = sayHi;
abc(); // Hello

ㅡㅡㅡㅡㅡ
함수 표현식 뒤에는 세미콜론을 붙여주는 이유

 

이유는 간단합니다.

if { ... }, for { }, function f { } 같이 중괄호로 만든 코드 블록 끝엔 ;이 없어도 됩니다.

함수 표현식은 let sayHi = ...;과 같은 구문 안에서 값의 역할을 합니다. 코드 블록이 아니고 값처럼 취급되어 변수에 할당되죠. 모든 구문의 끝엔 세미 콜론 ;을 붙이는 게 좋습니다. 함수 표현식에 쓰인 세미 콜론은 함수 표현식 때문에 붙여진 게 아니라, 구문의 끝이기 때문에 붙여졌습니다.
콜백함수 
🐳 TypeError: yes is not a function 남.

function ask(question, yes, no){
  if(question == 2) yes();
  else no();
}

function showOk(){
  console.log("동의했습니다");
}

function showCancle(){
  console.log("취소했습니다.");
}

ask(2, showOk(), showCancle());
 

- 함수 ask의 인수, showOk와 showCancel은 콜백 함수 또는 콜백이라고 함.

- 함수를 함수의 인수로 전달하고, 필요하다면 인수로 전달한 그 함수를 "나중에 호출(called back)"하는 것이 콜백 함수의 개념.

  위 예시에선 사용자가 "yes"라고 대답한 경우 showOk가 콜백이 되고, "no"라고 대답한 경우 showCancel가 콜백이 됨

 
ㅡㅡㅡㅡㅡ
함수 표현식 vs 함수 선언문 
함수 선언문

- 함수는 주요 코드 흐름 중간에 독자적인 구문 형태로 존재

- 함수 선언문은 함수 선언문이 정의되기도 전에 호출 가능

 


 

function sum(a,b){
  return a+b;
}
sayHi("Jhon"); // Hello, Jhon

function sayHi(name){
  console.log(`Hello, ${name}`);
}
✅ 함수 선언문, sayHi는 스크립트 실행 준비 단계에서 생성

-> 스크립트 내 어디에서든 접근 가능

 

함수 표현식

- 내부에 생성

- 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성 (이때부터 사용 가능) 

   아래 예시 코드에서는 실행 흐름이 let su...에 도달하고나서야 함수가 생성되고 또 사용 가능

 

let sum = function (a,b){
  return a+b;
}; ✅ 함수 표현식은 그래서 마침표가 필요
sayHi("Jhon"); // ReferenceError: Cannot access 'sayHi' before initialization

let sayHi = function(name){
  console.log(`Hello, ${name}`);
}
 

✅ 함수 표현식은 실행 흐름이 표현식에 다다랐을 때! 만들어짐. 

 

 

🐳 if문 밖에서 함수를 호출해주고 있어서 오류가 나야하는데... 정상 동작함

- if 문 위에 let welcome;으로 빼줘야 정상 실행하는게 옳음... 

let age = 18;

if (age<18){
  function welcome(){
    console.log("안녕");
  }
}else{
  function welcome(){
    console.log("안녕하세요");
  }
}

welcome();

ㅡㅡㅡㅡㅡ
화살표 함수 기본
- 함수 표현식보다 단순하고 간결한 문법으로 함수를 만들 수 있는 방법 = 화살표 함수 (arrow function) 

 

let func = (arg1, arg2, ... argN) => expression
let func = function (arg1, arg2, ... argN){
  return expression;
};
이 코드의 축약이라고 할 수 있음

 

// 

 

let sum1 = (a,b) => a+b; // 아래 함수의 축약 버전

let sum = function(a,b){
  return a+b;
};

console.log(sum1(1,2)); //3
 

✅ 인수가 하나밖에 없다면 인수를 감싸는 괄호 생략 가능

 

let double = n => n*2;

let double1 = function(n){
  return n*2;
};

console.log(double(8)); // 16
 

✅ 인수가 하나도 없을 때는 괄호를 비어둠. 단, 이때는 괄호 생략이 불가하다. 

 

let sayHi = () => console.log("안녕");

sayHi(); // 안녕

let sayHi1 = function(){
  console.log("안녕");
};
 

함수 표현식과 같은 방법으로 사용 가능. 

동적으로 만들 수도 있다. 

 

let age = 18;

let welcome = (age<18) ?
  () => console.log("안녕") :
  () => console.log("안녕하세요");

welcome(); // 안녕하세요

ㅡㅡㅡㅡㅡ
코드 구조
🐳 세미콜론이 자동 삽입되지 않을 때 


엄격 모드
모던 자바스크립트에서 지원하는 모든 기능을 활성화하려면 스크립트 맨 위에 'use strict' 적어줘야 함. 

'use strict';
- 스크립트 최상단이나 함수 본문 최상단에 있어야 함

 

변수
- 첫 글자는 숫자가 될 수 없음

- 특수기호는 $와 _만 사용 가능

- 자바스크립트는 동적 타이핑을 허용하기 때문에, 자료형을 바꿔가며 값을 할당 가능

 

let x = 5;
x = "maria";
 

자바스크립트는 여덟 가지 기본 자료형을 지원

정수와 부동 소수점을 저장하는 데 쓰이는 숫자형
아주 큰 숫자를 저장할 수 있는 BigInt형
문자열을 저장하는 데 쓰이는 문자형
논리값 true/false을 저장하는 데 쓰이는 불린형
‘비어있음’, '존재하지 않음’을 나타내는 null 값만을 위한 독립 자료형 null
값이 할당되지 않은 상태를 나타내는 undefined 값만을 위한 독립 자료형 undefined
복잡한 자료구조를 저장하는 데 쓰이는 객체형과 고유한 식별자를 만들 때 사용되는 심볼형
 

typeof 연산자의 2가지 예외 사항

console.log(typeof null); // object // 언어 자체 오류
console.log(typeof function(){}); // function // 함수는 특별하게 취급

ㅡㅡㅡㅡㅡ

상호작용
prompt(question, [default])
프롬프트 창에 매개변수로 받은 question을 넣어 사용자에게 보여줍니다. ‘확인’ 버튼을 눌렀을 땐 사용자가 입력한 값을 반환해주고, ‘취소’ 버튼을 눌렀을 땐 null을 반환합니다.

confirm(question)
컨펌 대화상자에 매개변수로 받은 question을 넣어 사용자에게 보여줍니다. 사용자가 ‘확인’ 버튼을 누르면 true를, 그 외의 경우는 false를 반환합니다.

alert(message)
message가 담긴 얼럿 창을 보여줍니다.
 

모달창이 닫히기 전까지 코드 실행이 중지됨

연산자
산술 연산자
사칙 연산에 관련된 연산자 * + - /와 나머지 연산자 %, 거듭제곱 연산자 **가 대표적
이항 덧셈 연산자 +는 피연산자 중 하나가 문자열일 때 나머지 하나를 문자형으로 바꾸고 두 문자열을 연결
console.log('1'+2); //12 (문자열)​


할당 연산자
a = b 형태의 할당 연산자
a *= 2 형태의 복합 할당 연산자

비트 연산자
비트 연산자는 인수를 32비트 정수로 변환하여 이진 연산을 수행

조건부 연산자
조건부 연산자는 자바스크립트 연산자 중 유일하게 매개변수가 3개인 연산자
cond ? resultA : resultB와 같은 형태
cond가 truthy면 resultA를, 아니면 resultB를 반환

논리 연산자
AND 연산자 &&와 OR 연산자 ||은 단락 평가를 수행
평가가 멈춘 시점의 값을 반환 (꼭 true나 false일 필요는 없음).
NOT 연산자 !는 피연산자의 자료형을 불린형으로 바꾼 후 그 역을 반환.

nullish 병합 연산자
nullish 병합 연산자 ??는 피연산자 중 실제 값이 정의된 피연산자를 찾는 데 쓰임.
a가 null이나 undefined가 아니면 a ?? b의 평가 결과는 a이고,
a가 null이나 undefined이면 a ?? b의 평가 결과는 b

비교 연산자
동등 연산자 ==는 형이 다른 값끼리 비교할 때 피연산자의 자료형을 숫자형으로 바꾼 후 비교를 진행
null과 undefined는 자기끼리 비교할 땐 참을 반환하지만 다른 자료형과 비교할 땐 거짓을 반환

console.log(0 == false); // true
console.log(0 == ''); // true​


기타 비교 연산자들 < > <= >=
역시 피연산자의 자료형을 숫자형으로 바꾼 후 비교를 진행

일치 연산자 ===
피연산자의 형을 변환하지 않음. 형이 다르면 무조건 다르다고 평가.

null과 undefined는 특별한 값.
두 값을 == 연산자로 비교하면 true를 반환하지만, 다른 값과 비교하면 무조건 false를 반환.

크고 작음을 비교하는 연산자의 피연산자로 문자열이 들어오면 글자 단위로 크기 비교가 이뤄짐. 다른 타입의 값이 들어오면 숫자형으로 형 변환한 후 비교를 진행.

기타 연산자
쉼표 연산자 등의 기타 연산자도 있습니다.


ㅡㅡㅡㅡㅡ
async라는건 : 동기 처리를 하는 와중에 ‘이건 비동기 처리를 해주겠다’ 라는 것
언제 처리가 될지는 모르겠지만 (뭐가 먼저 처리될지도 모르겠지만)
await는 ‘이 부분만큼은 동기처럼 해주겠다’라는 것
→ 이 이유 : java는 기본이 동기 방식인 반면에, js는 ‘싱글 스레드, 비동기’가 기본이기 때문


다시 코드를 보면
함수 호출해서 변수 user에 넣어줘 - 라는 ‘약속’만 한 것
그래서 Promise { <pending> }가 호출된 것
→ 내가 원하는 user를 출력하기 위해서는? await를 걸어서 함수 호출 후 데이터가 담길 때까지 기다린 후에, 출력을 한다.
