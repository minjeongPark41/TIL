함수
- 유사한 동작을 하는 코드가 여러 곳에서 필요할 때

- 함수는 프로그램을 구성하는 주요 '구성 요소(building block)'

  함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출 가능

 

 

함수 선언
함수 선언 방식 = 함수 선언문

 

function showMessage() {
  alert ('안녕');
}
 

- function 키워드, 함수 이름, 괄호로 둘러싼 매개변수, 함수 본문을 중괄호로 

 

function name (parameters) {
  .... 함수 본문 ... 
}
 

함수를 호출할 때는, 함수 이름 옆에  괄호를 붙여 호출

ex) showMessage() 

 

지역 변수
- 함수 내에서 선언한 변수인 '지역 변수'(local variable)는 함수 안에서만 접근 가능

 

function showMessage(){
  let message = '안녕'; // 함수 안에서 선언한 '지역 변수'
  alert(message);
}

showMessage(); // 안녕;
alert(message); // ReferenceError: message is not defined
 

외부 변수
- 함수 내부에서, 함수 외부의 변수인 외부 변수 (outer variable) = 전역 변수 (global variable)에 접근 가능

- 변수는 연관되는 '함수 내에서' 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋다. 

 

let userName = 'min';

function showMessage(){
  let message = 'Hello ! ' + userName;
  console.log(message);
}

showMessage(); // Hello ! min
 

함수에서는 외부 변수에 접근하는 것뿐만 아니라 수정도 가능

 

let userName = 'min'

function showMessage(){
  userName = 'maria'; // 외부 변수를 수정함
  let message = 'Hello ! ' + userName;
  console.log(message);
}

console.log(userName); // 함수 호출 전이므로 min 출력

showMessage(); // Hello ! maria ⭐️ 함수는 내부 변수 사용한다.

console.log(userName); // 함수에 의해 maria로 바뀜
alert(userName) // ⭐️
 

함수 내부에 외부 변수와 동일한 이름을 가진 변수가 선언되었다면 (위 경우에 userName)

-> 내부 변수가 이긴다. 🏆

 

❗️ 맨 마지막줄. alert(userName)은 뭐가 출력될까?

-> 여기서는 maria (위에 함수가 호출되었기 때문) 

-> 만약 함수가 호출안되었다면(showMessage()가 없다면) min 

 



위 사진과의 차이점이 있다면, 4번째줄에 let으로 지역변수를 또 준 것

ㅡㅡㅡㅡㅡ

매개 변수 (parameter)
- 임의의 데이터를 함수 안에 전달

 

function showMessage(from, text) {
  console.log(from + ':' + text);
}

showMessage('min', 'Hello!') // min:Hello!
 

- 함수의 전달된 인자는 '지역변수' from, text에 복사됨

 

function showMessage(from, text){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

let from = 'Ahn';

showMessage(from, 'Hello!'); // *Ahn*:Hello!

console.log(from); // Ahn 함수 밖의 값은 변경되지 않음. 함수는 '복사된' 값을 사용함
 

 

기본값 
- 매개변수에 값을 전달하지 않으면 그 값은 undefined가 됨

 

function showMessage(from, text){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

showMessage('Ahn'); // *Ahn*:undefined
- 매개 변수 2개인 함수에 한 개만 전달해주어도 오류가 나지 않음. undefined로 뜰 뿐

 

-> 매개변수에 값을 전달하지 않아도 그 값이 undefined가 되지 않게 하려면 기본값(default value)을 설정

매개변수에 = 을 붙이고 설정하고자 하는 기본값을 써주면 됨

 

function showMessage(from, text="text"){
  from = '*' + from + '*';
  console.log(from + ':' + text);
}

showMessage('Ahn'); // *Ahn*:text
 

✅ 복잡한 표현식도 기본값으로 설정이 가능하다. 

 

function anotherFunction(){
  console.log("flower");
}

function showMessage(from, text=anotherFunction()){
  console.log(from + text ); // You are like a undefined
}

showMessage('You are like a ')
 

🐳

showMessage()로 하면 -> flower가 나옴

원래 위에 예상식은 You are like a undefined가 아니라 You are like a flower인데... 

 

매개변수 기본값을 설정할 수 있는 또 다른 방법

-> 함수가 실행되는 도중에 기본값을 설정

- 일단 매개변수를 undefined와 비교하여 함수 호출 시 매개변수가 생략되었는지를 확인한다. 

 

function showMessage(text){
  if(text==undefined){
    text='빈 문자열';
  }
  console.log(text); // 빈 문자열
}

showMessage();
function showMessage (text){
  text = text || '빈 문자열';
  console.log(text); // 빈 문자열
}

showMessage();

function showMessage1 (text='플라워'){
  text = text || '빈 문자열';
  console.log(text); // 플라워
}

showMessage1();
 

if문 대신 논리 연산자 || 사용 가능

 


2021년 12월에 새롭게 추가된 문법 

 

a ?? b의 평가 결과는 다음과 같음
a가 null도 아니고 undefined도 아니면 a그 외의 경우는 b

ㅡㅡㅡㅡㅡ
반환 값

반환 값 (return value)
- 함수를 호출했을 때 호출한 곳에 특정 값을 반환하게 할 수 있음

 

function sum(a,b){
  return a+b;
}

let result = sum(1,2);
console.log(result); // 3
 

return은 함수 내 어디서든 사용 가능. 

대신 return을 만나면 함수 실행은 즉시 중단되고 값을 반환함.

 

함수 하나에 여러 개의 return문이 올 수도 있음.

function checkAge(age){
  if(age>=20){
    return true;
  }else{
    return console.log("뭐든지 할 나이다.")
  }
}

let age = 24;

if(checkAge(age)){
  console.log("true"); // true
}else{
  console.log("10대");
}
 

return만 명시하는 것도 가능 = 즉시 종료

 

function checkAge(age){
  if(age>=20){
    return true;
  }else{
    return console.log("뭐든지 할 나이다.")
  }
}

function showMovie(age){
  if(!checkAge(age)){
    return
  }
}

showMovie(18); // 아무것도 출력 안 됨
 

return문이 없거나, return 지시자만 있는 함수는 undefined를 반환한다. 

- return은 return undefined와 동일하게 동작한다. 

 

function doNothing(){}

doNothing(); // 이러면 아무것도 출력이 안되서 알 수 없지만,
console.log(doNothing() === undefined); // true. 가 출력되서 return문이 없는 함수도 undefined를 반환하는 것을 알 수 있다.
function doNothing(){
  return; // 이러면 아무것도 출력이 안되서 알 수 없지만,
}

console.log(doNothing() === undefined); // true. 가 출력되서 return문'만' 있는 함수도 undefined를 반환하는 것을
 


 


 
