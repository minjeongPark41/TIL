
git flow 전략

develop 폴더에서 시작
- git pull origin develop
✅ git log 후 commit한 게 다 들어가 있는지 확인
- 만약 마지막 commit했던게 뭔지 기억이 나지 않으면, 다시 (마지막으로 커밋해준) feature 브랜치로 이동후
git log로 비교해서 확인

- git flow release start x.x.x
(✅ 이거는 develop와 환경만 같다면 feature 브랜치에서 해줘도 무방하다.)
-> 버전은 package.json에서 확인 (현재 버전보다 올려줘서 git flow release start x.x.x 작성하기 + (만약에 git flow가 깔려져 있지 않다면 git flow init) + package.json도 올려준 버전으로 수정)
package.json을 수정해주었으므로 commit
git flow release finish x.x.x
-> 버전 적는 vim이 나오는데 ⭐️태그를 꼭 적어주어야 한다.
i (insert) 누르고, x.x.x (수정해준 버전)을 적어준다.
이 버전을 저장해야 하는 것이므로 esc + :wq

git flow release 사용한 다음에 아래 명령어를 실행해주어야 한다. (hotfix도 마찬가지)

git push origin master
git push origin develop
git push origin --tags

✅ push는 다 develop 브랜치에서 해줘도 무방하다.

cf) git flow release 전략

→ “개발하고 있던 develop를 release 브랜치를 만들어 merge하고 tag하는 일을 한다.
develop을 통해서 1.0, 2.0…이런 브랜치를 만들었고
finish 하면 그 브랜치가 develop와 master에 merge가 된다.
그리고 merge된 master에는 ‘태그 브랜치’가 생기게 된다.”

→ 따라서 push가 3개가 필요하다.

ㅡㅡㅡㅡㅡ

aws에서 터미널 입력 부분 (lighthouse)

// 먼저 코드 있는 곳을 들어가야
ls
cd xxx // 파일 있는 곳으로 이동
(cat package.json)

// 내가 develop에 merge 시킨 내용을 들고 와야
git pull origin develop <- ✅ 이건 개발계 배포일 때 (실제 prod 배포때는 git pull origin master)

// 다시 실행 시키기
sudo npm run restart