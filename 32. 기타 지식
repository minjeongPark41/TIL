was, admin 폴더 이름의 비밀


was (Web Application Server)
서버 클라이언트의 요청이 있을 때 내부의 프로그램을 통해 결과를 만들어내고 이것을 다시 클라이언트에 전달해주는 역할을 하는 웹 컨테이너.


admin server
특정 도메인에 대한 구성 제공

ㅡㅡㅡㅡㅡ
const router = express.Router();
함수 호출한 결과를 router라는 변수로 객체를 담은 것.
express객체 .Router() 함수 호출하면 → 지금 Router 새로 만드는 것 (초기화)
-> 그 결과 객체를 return 하는데, 그걸 router 변수 안에 담은 것.

변수 = 담을 수 있는 그릇
-> 즉, router 변수 안에 객체를 담은 것

ㅡㅡㅡㅡㅡ

<instaerror.js>
module.exports = function InstaError(messag,...
클래스 만들어서 exports 객체에 싣음
만들고자 하는 모듈을 파일로 만들고 exports 객체의 속성이나 메소드를 정의해주면 모듈을 만들 수 있음
<users.js>
const InstaError = require('../../common/instaerror');
만들어진 모듈을 전역 함수 require()를 이용하여 추출 → 파일을 불러와 결과 값을 변수 에 대입
exports 객체에 추가해줬던 속성이나 메소드를 사용할 수 있게 됨
throw new InstaError(req.__(STRINGS.ERR_USER_NOT_FOUND), 404);
new class인 셈으로 객체를 만든 것

ㅡㅡㅡㅡㅡ
함수 레이어가
<user.js>에 a 함수
함수 타고 들어가서 b 함수
또 함수 타고 들어가서 c 함수
→ 이렇게 있다고 할 때, c 함수에서 오류를 내면 ‘맨 처음’ 레이어인 <user.js>의
try-catch 부분의 catch 부분에서 ‘항상’ 처리해준다.

ㅡㅡㅡㅡㅡ
return cache.get(cacheKey);
나는 그냥 ‘캐시를 리턴해주네’ 하고 넘어갔었는데, 그러다보니 코드를 해석하는 부분에 있어서 오해가 나타나 지장을 주었음
→ 정확한 해석 : ‘cacheKey를 key로 cache에서 get해오는 값’

ㅡㅡㅡㅡㅡ
	Q. const uidSocial = req.body.UID_SOCIAL;
에서 body란 어떤 body인가.
→ body의 종류 (1) request body (2) response body
→ 여기서는 request body (요청받을 때 정보가 있는 body ↔︎ 응답해줄 때의 정보가 있는 body)


→ response body는 res.json({ user, jwt: UserAuthenticator.getJWTToken(user) }); 이때 사용하는 body. 주석이 붙여넣기가 안되었는데 주석까지 적으면 res.json(body:{위에 내용})임