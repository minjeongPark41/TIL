[develop]

git clone해서 받으면 master 하나만 존재.

1. 나는 master에서 따서 '로컬' develop 브랜치를 만들어주고, 여기서 git pull origin develop를 한 다음에

2. (리모트와 로컬을 맞추어준) develop에서 feature 브랜치를 만들어서 작업을 해야한다고 생각.

 

그런데,

[리모트]
- master에 어떤어떤 내용이 있고
- develop에 어떤어떤 내용이 있을 것

[로컬]
- git clone 해서 master만 존재 
-> master에서 git checkout -b develop로 만든 로컬 develop 브랜치는 master의 내용이 담겨있을 것. 

즉, remote의 develop와 local의 develop가 전혀 다른 내용이 담긴 것
 

그렇게(위) 만든 (로컬) develop에 git pull origin develop를 해봤자 

-> 이미 (기능이 더 많을) master와 똑같은 '곳'에 develop의 commit들을 가지고 오는거니, 

'내가 기대하는' develop와 (이건 리모트의 develop)와 실제 내 로컬에 만들어진 develop는 다를 것

 

 

그럼, 

remote의 develop는 어떻게 가지고 올 수 있을까?

 

원격 브랜치를 추적하는 새로운 브랜치 만들기
git checkout --track -b feature origin/feature
git checkout -t origin/feature,
 

git checkout -b <branch> <remote>/<branch> 명령으로 간단히 트래킹 브랜치를 만들 수 있고,
--track 옵션을 사용하여 로컬 브랜치 이름을 자동으로 생성할 수 있음

 

더 생략 가능

만약 리모트에 브랜치가 있고, 로컬에 없으면

git checkout develop 라는 명령어만으로도 리모트 브랜치를 '트래킹' 브랜치로서 생성 가능

 ㅡㅡㅡㅡ

 [git flow 개념]
 핵심은, 

- master에서 작업하지 않고 develop 브랜치를 하나의 중심축으로 삼아서

  (1) 기능 수정들은 feature branch에서
  (2) 배포할 때는 realeas branch에서 버그 수정 등 배포 후 발생하는 일들을 이곳에서 해준다.  

   틈틈히 develop에 merge 

- realease branch에서 충분히 변경사항을 수정하면
   (1) master 브랜치에 merge, tag 기능을 통해서 기록

   (2) develop에도 같이 해준다. 계속 수정은 해나가야하니! 

- hotfixes는 긴급한 문제해결을 위해 따로 만든 branch (master, develop 모두에 merge)

ㅡㅡㅡㅡㅡ

test.txt 라는 파일을 만들었다고 해보자

 

1. 셋팅
(1) 내 로컬에 있는 파일을 원격 저장소와 연결

git init

git remote add origin 원격저장소 주소

// git remote -v 해서 연결 확인
(2) 커밋해보자

- test.txt 내용 수정 후 커밋

git add test.txt
git commit -am "master1"

// 버전도 붙이려면
// git tag 0.1
 

cf)

git commit -m = send log message

git commit -am = git add -a + git commit -m

 

-a option.

This basically tells Git to run git add on any file that is "tracked" - that is, any file that was in your last commit and has been modified. 

ㅡㅡㅡㅡㅡ

2. develop branch 다루기

(1) develop 브랜치 만든 후에 이동

git checkout -b develop
cf)

git branch BRANCH_NAME creates a new branch but leaves you on the same branch.

git checkout -b BRANCH_NAME creates a new branch and checks out the new branch

 

cf)

git log --decorate --all --graph --oneline
지금 내가 어디어디 브랜치에 속해 있는지를 보여줌

 
(2) develop 브랜치 내 'test.txt' 내용 수정 후 커밋

- 브랜치 구성 공부하려 이렇게 한 것이지, 일반적인 경우에는 develop에 직접 이렇게 커밋을 해주는 것보다 feature에서 접근하도록 하는게 맞는 듯

git commit -am "develop 2"

git log --decorate --all --graph --oneline -> develop2는 현재 develop 브랜치에 있는 것을 확인

ㅡㅡㅡㅡㅡㅡ

3. feature 다루기
(1) feature 브랜치 만든 후에 이동

git checkout -b feature

나는 feature-som 대신에 feature라고 명명지어줌
 

git log --decorate --all --graph --oneline -> develop, feature 브랜치에 있는 것을 확인

 

(2) feature 브랜치 내 'test.txt' 내용 수정 후 커밋

git commit -am "feature3"

 

git log --decorate --all --graph --oneline -> feature 브랜치에 있는 것을 확인


ㅡㅡㅡㅡㅡ

4. develop에 병합하기
- 실무에서는 내가 만든 feature 브랜치 내용은 develop에서 pull request 하도록 해주기 때문에, merge 과정은 안간다고 보면 됨. 

 

(1) develop 브랜치로 이동

git checkout develop
(2) feature에서 작업해줬던 것을 merge

git merge feature

(3) feture 브랜치는 삭제해줘도 됨

git branch -d feature

ㅡㅡㅡㅡㅡ

cf) github에 많이 올리면서 익숙한 명령어로 개념을 살펴보자.
* 로컬, 리모트 개념 챙겨 *

평소에는 내 PC의 로컬 저장소에서 작업하다가 작업한 내용을 공개하고 싶을 때에 원격 저장소에 업로드

git init을 함으로서 -> .git 이라는 로컬 저장소가 생김

Most other Git commands are not available outside of an initialized repository, so this is usually the first command you'll run in a new project. 
Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. 
질문

또 궁금증. repository는 원격 저장소 아닌가? 
git init을 하면, 현재 폴더 내에 바로 '.git' 저장소가 생김을 항상 봐왔지.
아직 원격 저장소하고 연결해준 것도 아닌데, 어떻게 원격 저장소 정보들을 알아가지고는 new repository에 대한 metadata들을 가지고 와줄 수 있는거지? 
 

답

원격 저장소(Remote Repository): 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소. 
로컬 저장소(Local Repository): 내 PC에 파일이 저장되는 개인 전용 저장소. 
 

-> repository를 github에서 만든 기억 때문에 원격 저장소라고만 생각했는데ㅎㅎㅎ 아니라는거.

ㅡㅡㅡㅡㅡ

git add . 

Adds content to the index or staging area.
질문

index?? 
 

답
 

staging area가 index였다. (커밋을 실행하기 전의 저장소와 작업 트리 사이에 존재하는 공간)

ㅡㅡㅡㅡㅡ

git commit -m "커밋 메시지"

--message=<msg> 되는지 확인해보기
Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs. 멀티플 해보기
The -m option is mutually exclusive with -c, -C, and -F. (이 옵션들과는 같이 사용 불가) 

ㅡㅡㅡㅡㅡ

git branch -M main

-m 

--move

Move/rename a branch, together with its config and reflog.
-M

Shortcut for --move --force.
 

질문 1

맨 처음 올려주는 것으로서 main으로 이렇게 올려주는 작업이 필요한 게 맞는 것 같은데, 왜 그동안 이 명령어를 한 번도 안했지? 
 

답

아마 defualt 저장소가 이미 main(혹은 master) 이기 때문

bitbucket에서는 master
 