[develop]

git clone해서 받으면 master 하나만 존재.

1. 나는 master에서 따서 '로컬' develop 브랜치를 만들어주고, 여기서 git pull origin develop를 한 다음에

2. (리모트와 로컬을 맞추어준) develop에서 feature 브랜치를 만들어서 작업을 해야한다고 생각.

 

그런데,

[리모트]
- master에 어떤어떤 내용이 있고
- develop에 어떤어떤 내용이 있을 것

[로컬]
- git clone 해서 master만 존재 
-> master에서 git checkout -b develop로 만든 로컬 develop 브랜치는 master의 내용이 담겨있을 것. 

즉, remote의 develop와 local의 develop가 전혀 다른 내용이 담긴 것
 

그렇게(위) 만든 (로컬) develop에 git pull origin develop를 해봤자 

-> 이미 (기능이 더 많을) master와 똑같은 '곳'에 develop의 commit들을 가지고 오는거니, 

'내가 기대하는' develop와 (이건 리모트의 develop)와 실제 내 로컬에 만들어진 develop는 다를 것

 

 

그럼, 

remote의 develop는 어떻게 가지고 올 수 있을까?

 

원격 브랜치를 추적하는 새로운 브랜치 만들기
git checkout --track -b feature origin/feature
git checkout -t origin/feature,
 

git checkout -b <branch> <remote>/<branch> 명령으로 간단히 트래킹 브랜치를 만들 수 있고,
--track 옵션을 사용하여 로컬 브랜치 이름을 자동으로 생성할 수 있음

 

더 생략 가능

만약 리모트에 브랜치가 있고, 로컬에 없으면

git checkout develop 라는 명령어만으로도 리모트 브랜치를 '트래킹' 브랜치로서 생성 가능

 ㅡㅡㅡㅡ

 [git flow 개념]
 핵심은, 

- master에서 작업하지 않고 develop 브랜치를 하나의 중심축으로 삼아서

  (1) 기능 수정들은 feature branch에서
  (2) 배포할 때는 realeas branch에서 버그 수정 등 배포 후 발생하는 일들을 이곳에서 해준다.  

   틈틈히 develop에 merge 

- realease branch에서 충분히 변경사항을 수정하면
   (1) master 브랜치에 merge, tag 기능을 통해서 기록

   (2) develop에도 같이 해준다. 계속 수정은 해나가야하니! 

- hotfixes는 긴급한 문제해결을 위해 따로 만든 branch (master, develop 모두에 merge)

ㅡㅡㅡㅡㅡ

test.txt 라는 파일을 만들었다고 해보자

 

1. 셋팅
(1) 내 로컬에 있는 파일을 원격 저장소와 연결

git init

git remote add origin 원격저장소 주소

// git remote -v 해서 연결 확인
(2) 커밋해보자

- test.txt 내용 수정 후 커밋

git add test.txt
git commit -am "master1"

// 버전도 붙이려면
// git tag 0.1
 

cf)

git commit -m = send log message

git commit -am = git add -a + git commit -m

 

-a option.

This basically tells Git to run git add on any file that is "tracked" - that is, any file that was in your last commit and has been modified. 


