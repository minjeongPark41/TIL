Intro. 좋은 코드 - 엔지니어링

컴퓨팅 산업
- 역사가 짧다. 아직 100년도 되지 않았다.

과학은 밝혀내고, 엔지니어링은 해결한다.

엔지니어링의 정의
- 어떻게 하면 자원을 적게 쓸까
- 어떻게 더 효과적으로 만들 수 있을까

요즘 국내에서 유행하는 단어. '클린 코드'
- 이분은 굳이 좋아하지 않는다고. ("관심 없어서 잘 몰라요.")
- 보편적인 코드 기준처럼 여겨지는게 싫다고.
   "이거를 통해서 얻을 수 있는게 뭘까요. 왜 추구해야할까요."
- "엔지니어로서 높은 기준을 가지고 일을 하는 사람들인가."
  상황마다 다르다.

  패턴은 치료약이나 열쇠같은거다.
  - 제대로 쓰지 않으면 해가 될 수도 있다.
  -> 언제 이 패턴을 써야하는지가 중요. (어디에나 쓰이는 만병 통치약은 없다.)

  현장은 야전이다. (무엇이 존재할지 모르는 곳)
  엔지니어링은 트레이드 오프다. (더 심각한 문제 <-> 덜 심각한 문제)

  근육 기억
  - 생각의 비용을 줄이도록 하자. (반복되는 문제 해결에는 비용 많이 쓰지 않기)
  - 이 분. 하루에 테스트코드 100개씩 해서 1000개를 나쁜 고릇을 고치려 다시 작성한적이 있다고.

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 1. 코드 기능 명세

SW 기능명세

= 이런 입력이 있으면 이런 출력이 있었으면 좋겠어.

- 컴퓨터는 이런 기능명세를 항상 기대함



도메인

-sw가 풀어야 할 문제가 정의되는 공간

- 문제를 충분히 이해하지지 못하면 문제를 푸는 도구를 잘 만들 수 없다.
  즉, 도메인 이해가 중요하다.



도메인 지식 흐름

- 비즈니스 전문가 : 세상에서 풀고자 하는 문제의식을 지님.

  분석가 (기획자, po 등) : 비즈니스 문제를 어떻게 sw로 풀 것인지를 기획

  프로그래머 : 컴퓨터로 전달

- 위로 갈수록 추상적

   아래로 갈수록 구체적



비즈니스 전문가

- 문제를 가장 잘 이해하고 있음

- 문제 설명이 부족 (문제를 너무 잘 알고 있다보니 되려 문제를 모르는 사람을 잘 이해 못할 때도..)

- 문제 풀이도 가장 잘 안다고 착각



분석가

- 비즈니스 전문가로부터 요구사항을 발굴해냄

- 요구사항의 오류를 탐색

- 발견된 문제점을 구현 작업 전에 협업을 통해 해결

  (비즈니스 전문가, 개발자와 긴밀하게 협업)

  가장 비용이 많이 드는게 개발자가 코드를 만들고 수정하는 것이기 때문에 구현 전에 긴밀하게 작업



프로그래머

- 정제된 기능 명세를 아키텍처와 코드로 번역

- 지식 흐름 과정의 마지막 과정



컴퓨터

- 코드를 통해 프로그래머로부터 지식을 전달 받음

- 철저히 수동적 (프로그래머가 시킨 일만 한다.)

- 융통성이 없음



-> 그래서 프로그래머는 기능 명세에 민감하다.

- 프로그래머가 지닌 책임 : 도메인 지식이 아직 충분하지 않다고 생각이 되면 상류에 요청을 분명히 해야함

- 스스로 결정을 내리면 안 됨. 비즈니스 원천이 훼손될 수도 있음. (무책임하고 위험한 도박이 될 수도)





단위 테스트 작성 실습

- 통계적 지식이 전달되지 않았을 때 잘못 만들었던 예시
   (도메인 지식의 중요성)

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 2. 테스트 기법

수동 테스트

- QA분이 UI를 통해 기능을 검증 (소비자와 가장 비슷한 방법으로 검증)

- 인수 테스트에 많이 사용됨

단점 : 실행 비용이 높고 결과의 변동이 크다.




원래 동작하던 것들이 동작하지 않는
회귀 테스트 대상은 시간이 지날수록 증가함

- 새로운 기능이 추가되면서 이전 기능이 작동하지 않을 가능성이 높아지므로.

  추가/변경된 기능들이 이전 동작에 영향을 끼치게 되는 것

-> 수동 테스트만으로는 이전 기능들까지 다 돌아가지는 테스트하는게 한계가 존재



테스트 자동화

- 사람이 직접 테스트하는게 아니라 '기능'을 검증하는 코드를 작성하는 것

- 운영 코드 외에 테스트 코드도 작성하므로 작성 비용이 소비되지만, 실행 비용이 낮고 결과의 신뢰도가 높음

단점 : 테스트코드 작성/관리가 프로그래머의 역량에 크게 영향 받음



인수 테스트

- 배치가 완료된 시스템을 대상으로 검증

  사용자에게 인수되어도 되는지를 테스트

- 이상 여부 신뢰도가 높음.

단점 : 높은 비용 (다 ~ 완료가 된 다음에 테스트가 되기에)

          프로그래머에게의 피드백 품질이 낮음.



단위 테스트

- 전체 테스트가 아니라 하위 시스템을 떼어내서 테스트

-> 낮은 비용

- 실패하면 버그가 어디서 발생했는지 등을 알 수 있기에, 프로그래머가 높은 피드백을 받을 수 있음

단점 : 전체 시스템 이상 여부 신뢰도가 낮음. (단위 테스트가 성공한다고 해서 전체  시스템이 성공한다는 보장이 없음)

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 3. 코드 분해


프로그래머에게 주어지는 문제는, 한 번에 생각할 수 있는 범위를 넘어서는 문제가 주어질 수도 있음

시스템의 크기는 점점 더 커짐

-> 프로그래머는 큰 문제를 작은 문제로 분해. 다행히 작은 문제의 일부는 반복됨.



코드 재사용

- 반복되는 문제의  풀이는 재사용 가능 (✅ 이때 코드 변경말 것. 의도하지 않은 영향을 줄 수도 있기에)

- sw 개발 비용 절감 (엔지니어링 철학과 맞닿아있음)

-> 이런게 라이브러리가 되는 것.



모듈화

분해 : 큰 시스템은 작은 하위 시스템으로 분해 가능, 교체 가능

조립 : 작은 시스템은 더 큰 상위 시스템으로 조립 가능, 모듈 재사용, 라이브러리

단위 테스트



재사용되는 단위가 모듈.

모듈은 크게 2가지로 구성된다.

인터페이스 : 모듈이 어떤 기능을 제공하는지, 그 기능을 제공받기 위해 모듈을 어떻게 사용해야하는지

구현 : 모듈이 어떻게 만들어지는지

✅ 모듈을 재사용할 때는 '인터페이스'를 고려해서 설계

- '기존에 존재하는 이 코드를 어떻게 배치해서 사용해야할지'

- 내부적으로 어떻게 구현되는지를 알지 x



충분히 신뢰할 수 있어야 모듈을 사용할 것.

- 수동 테스트보다는 단위 테스트가 신뢰감을 더 줄 수 있다.

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 4. 단위 테스트

jest 설치

npm install --save-dev jest

중복된 문자를 줄여주는지를 테스트

index.js에 해당 코드 존재.

function refineTest(s) {
  return s.replace("    ", " ").replace("  ", " ");
}

module.exports = refineTest;


index.test.js 파일 새롭게 만들어서

const sut = require("./index");
// sut의 약자는 system under test

test("연속된 2개의 공백이 중복을 없애서 -> 하나의 공백으로 나오는지를 테스트", () => {
	const actual = sut("hello  world");
    expect(actual).toBe("hello world");
});


돌려보면 성공!




// 성공했으나 공백 문자 4개에 대해서도 테스트를 해보자.



test('4개의 공백이 -> 하나의 공백으로 나오는지를 테스트', () => {
  const actual = sut("hello    world");
  expect(actual).toBe("hello world");
})

ㅡㅡㅡㅡㅡ

3개도 해보자

test('3개의 공백이 -> 하나의 공백으로 나오는지를 테스트', () => {
  const actual = sut("hello   world");
  expect(actual).toBe("hello world");
})



fail이 남!



문제를 해결하기 전에, 테스트코드를 수정해보자.

우리는 프로그래머. 반복을 줄여보자.



기존 식

const sut = require("./index");
// sut의 약자는 system under test
// 대상이 되는 코드를 불러와서 변수 sut에 담은 것

test("연속된 2개의 공백이 중복을 없애서 -> 하나의 공백으로 나오는지를 테스트", () => {
  const actual = sut("hello  world");
  expect(actual).toBe("hello world");
});
test('4개의 공백이 -> 하나의 공백으로 나오는지를 테스트', () => {
  const actual = sut("hello    world");
  expect(actual).toBe("hello world");
})
test('3개의 공백이 -> 하나의 공백으로 나오는지를 테스트', () => {
  const actual = sut("hello   world");
  expect(actual).toBe("hello world");
})


for loop를 사용해서 반복을 줄인 식

// for loop를 사용하여 반복 줄이기
test('중복된 공백을 하나의 공백으로 줄이는지를 확인하는지 테스트 - for loop 사용', ()=>{
  for (const source of ['hello  world', 'hello    world', 'hello   world']){
    const actual = sut(source);
    expect(actual).toBe("hello world");
  }
})


하지만 여전히 오류가 남 + 그리고 문제가 있음




문제 1.

입력값이 뭔지를 알 수 없음.

- 아까는 2개일 때, 3개일 때, 4개일 때를 각각 분리해서 돌려줬기에 3개일 때 오류가 난다는걸 알았는데 지금은 알 수 없음



문제 2.

- 중간에 실패를 해버리면 다음 테스트는 실행하지 않아서, 다음 테스트는(공백이 x개일 때) 되는지 안되는지 알 수 없음







다행히 jest에서 지원해주는게 있다.

parameterized test (✅ 다양한 테스트 데이터에 동일한 테스트를 돌리고 싶을 때)
-> jest에서는 parameterized test 를 위해 2가지 함수를 제공

1. test.each()
- 테스트 데이터를 2차원 배열에 담에서 test.each()함수의 인자로 넘기면,
   배열을 루프 돌면서 각 테스트 데이터를 대상으로 테스트 함수를 호출

2. describe.each()
- 좀 더 복잡한 함수에 대한 파라미터화 테스트를 작성할 때는 describe.each() 함수를 이용.
- describe.each() 함수는 여러 테스트 함수를 여러 테스트 데이터를 대상으로 실행해야할 때 사용


출처 : https://www.daleseo.com/jest-each/


(1) 맨 처음 직접 작성해줬던 테스트의 중복 제거도 해주면서

(2) for loop를 통해 나타났던 문제도 제거해준다.

test.each`
  source                 | expected
  ${"hello  world"}      | ${"hello world"}
  ${"hello   world"}     | ${"hello world"}
  ${"hello    world"}    | ${"hello world"}
  ${"hello     world"}   | ${"hello world"}
  ${"hello      world"}  | ${"hello world"}
  ${"hello       world"} | ${"hello world"}
`('sut transforms "$source" to "$expected"', ({ source, expected }) => {
  const actual = sut(source);
  expect(actual).toBe(expected);
});
강의 코드는 이러한데 직관적으로 다가오지 않는다.

나한테는 배열 형태가 더 다가와서 참조 코드를 활용하여 바꿔주었다.

// parameterized 테스트코드 작성 -  test.each 사용
test.each([
  ["hello  world", "hello world"],
  ["hello   world", "hello world"],
  ["hello    world", "hello world"],
])('parameterized 테스트코드 작성 -  test.each 사용', (first, expected) => {
  const actual = sut(first);
  expect(actual).toBe(expected);
})




cf) 위 코드를 응용해서 작성해줄 때 참고해준 코드

import { areAnagrams } from "./";

test.each([
  ["cat", "bike", false],
  ["car", "arc", true],
  ["cat", "dog", false],
  ["cat", "act", true],
])("areAnagrams(%s, %s) returns %s", (first, second, expected) => {
  expect(areAnagrams(first, second)).toBe(expected);
});





-> 몇 번째 테스트코드에서 실패했는지를 알 수 있음 (공백이 3개인 곳에서 오류가 났구나 ~~ ) 


