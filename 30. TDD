Intro. 좋은 코드 - 엔지니어링

컴퓨팅 산업
- 역사가 짧다. 아직 100년도 되지 않았다.

과학은 밝혀내고, 엔지니어링은 해결한다.

엔지니어링의 정의
- 어떻게 하면 자원을 적게 쓸까
- 어떻게 더 효과적으로 만들 수 있을까

요즘 국내에서 유행하는 단어. '클린 코드'
- 이분은 굳이 좋아하지 않는다고. ("관심 없어서 잘 몰라요.")
- 보편적인 코드 기준처럼 여겨지는게 싫다고.
   "이거를 통해서 얻을 수 있는게 뭘까요. 왜 추구해야할까요."
- "엔지니어로서 높은 기준을 가지고 일을 하는 사람들인가."
  상황마다 다르다.

  패턴은 치료약이나 열쇠같은거다.
  - 제대로 쓰지 않으면 해가 될 수도 있다.
  -> 언제 이 패턴을 써야하는지가 중요. (어디에나 쓰이는 만병 통치약은 없다.)

  현장은 야전이다. (무엇이 존재할지 모르는 곳)
  엔지니어링은 트레이드 오프다. (더 심각한 문제 <-> 덜 심각한 문제)

  근육 기억
  - 생각의 비용을 줄이도록 하자. (반복되는 문제 해결에는 비용 많이 쓰지 않기)
  - 이 분. 하루에 테스트코드 100개씩 해서 1000개를 나쁜 고릇을 고치려 다시 작성한적이 있다고.

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 1. 코드 기능 명세

SW 기능명세

= 이런 입력이 있으면 이런 출력이 있었으면 좋겠어.

- 컴퓨터는 이런 기능명세를 항상 기대함



도메인

-sw가 풀어야 할 문제가 정의되는 공간

- 문제를 충분히 이해하지지 못하면 문제를 푸는 도구를 잘 만들 수 없다.
  즉, 도메인 이해가 중요하다.



도메인 지식 흐름

- 비즈니스 전문가 : 세상에서 풀고자 하는 문제의식을 지님.

  분석가 (기획자, po 등) : 비즈니스 문제를 어떻게 sw로 풀 것인지를 기획

  프로그래머 : 컴퓨터로 전달

- 위로 갈수록 추상적

   아래로 갈수록 구체적



비즈니스 전문가

- 문제를 가장 잘 이해하고 있음

- 문제 설명이 부족 (문제를 너무 잘 알고 있다보니 되려 문제를 모르는 사람을 잘 이해 못할 때도..)

- 문제 풀이도 가장 잘 안다고 착각



분석가

- 비즈니스 전문가로부터 요구사항을 발굴해냄

- 요구사항의 오류를 탐색

- 발견된 문제점을 구현 작업 전에 협업을 통해 해결

  (비즈니스 전문가, 개발자와 긴밀하게 협업)

  가장 비용이 많이 드는게 개발자가 코드를 만들고 수정하는 것이기 때문에 구현 전에 긴밀하게 작업



프로그래머

- 정제된 기능 명세를 아키텍처와 코드로 번역

- 지식 흐름 과정의 마지막 과정



컴퓨터

- 코드를 통해 프로그래머로부터 지식을 전달 받음

- 철저히 수동적 (프로그래머가 시킨 일만 한다.)

- 융통성이 없음



-> 그래서 프로그래머는 기능 명세에 민감하다.

- 프로그래머가 지닌 책임 : 도메인 지식이 아직 충분하지 않다고 생각이 되면 상류에 요청을 분명히 해야함

- 스스로 결정을 내리면 안 됨. 비즈니스 원천이 훼손될 수도 있음. (무책임하고 위험한 도박이 될 수도)





단위 테스트 작성 실습

- 통계적 지식이 전달되지 않았을 때 잘못 만들었던 예시
   (도메인 지식의 중요성)

ㅡㅡㅡㅡㅡ
1부. 테스트 주도 개발 기초 - 2. 테스트 기법

수동 테스트

- QA분이 UI를 통해 기능을 검증 (소비자와 가장 비슷한 방법으로 검증)

- 인수 테스트에 많이 사용됨

단점 : 실행 비용이 높고 결과의 변동이 크다.




원래 동작하던 것들이 동작하지 않는
회귀 테스트 대상은 시간이 지날수록 증가함

- 새로운 기능이 추가되면서 이전 기능이 작동하지 않을 가능성이 높아지므로.

  추가/변경된 기능들이 이전 동작에 영향을 끼치게 되는 것

-> 수동 테스트만으로는 이전 기능들까지 다 돌아가지는 테스트하는게 한계가 존재



테스트 자동화

- 사람이 직접 테스트하는게 아니라 '기능'을 검증하는 코드를 작성하는 것

- 운영 코드 외에 테스트 코드도 작성하므로 작성 비용이 소비되지만, 실행 비용이 낮고 결과의 신뢰도가 높음

단점 : 테스트코드 작성/관리가 프로그래머의 역량에 크게 영향 받음



인수 테스트

- 배치가 완료된 시스템을 대상으로 검증

  사용자에게 인수되어도 되는지를 테스트

- 이상 여부 신뢰도가 높음.

단점 : 높은 비용 (다 ~ 완료가 된 다음에 테스트가 되기에)

          프로그래머에게의 피드백 품질이 낮음.



단위 테스트

- 전체 테스트가 아니라 하위 시스템을 떼어내서 테스트

-> 낮은 비용

- 실패하면 버그가 어디서 발생했는지 등을 알 수 있기에, 프로그래머가 높은 피드백을 받을 수 있음

단점 : 전체 시스템 이상 여부 신뢰도가 낮음. (단위 테스트가 성공한다고 해서 전체  시스템이 성공한다는 보장이 없음)


